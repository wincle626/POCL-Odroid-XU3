--- a/AMD-APP-SDK-3.0/samples/opencl/cl/2.0/FineGrainSVMCAS/FineGrainSVMCAS_Kernels.cl	2015-12-02 18:29:15.569686180 +0100
+++ b/AMD-APP-SDK-3.0/samples/opencl/cl/2.0/FineGrainSVMCAS/FineGrainSVMCAS_Kernels.cl	2015-12-02 18:29:36.613019709 +0100
@@ -26,7 +26,7 @@
 	if (i != get_global_size(0)) {
 		do {			
 				list[i] = head;
-		   } while (!atomic_compare_exchange_strong((atomic_int *)&list[0], &head, i));
+		   } while (!atomic_compare_exchange_strong((global atomic_int *)&list[0], &head, i));
 		}
 }
 
@@ -40,6 +40,6 @@
 		do {
 			if (head == 0) return;
 			next = list[list[0]];
-		} while (!atomic_compare_exchange_strong ((atomic_int *)&list[0], &head, next ));
+		} while (!atomic_compare_exchange_strong ((global atomic_int *)&list[0], &head, next ));
 	}
 }
--- a/AMD-APP-SDK-3.0/samples/opencl/cl/2.0/CalcPie/CalcPie_Kernels.cl	2015-12-02 18:26:51.179684865 +0100
+++ b/AMD-APP-SDK-3.0/samples/opencl/cl/2.0/CalcPie/CalcPie_Kernels.cl	2015-12-02 18:27:01.906351623 +0100
@@ -24,7 +24,7 @@
 	 
   float r = sqrt((rX[i]*rX[i])+(rY[i]*rY[i]));
   if (r <= 1) 
-	atomic_fetch_add_explicit ((atomic_int *)inside, 1, memory_order_seq_cst, memory_scope_device);
+	atomic_fetch_add_explicit ((global atomic_int *)inside, 1, memory_order_seq_cst, memory_scope_device);
 }
 
 
--- a/AMD-APP-SDK-3.0/include/SDKUtil/CLUtil.hpp	2015-12-02 19:19:06.119713395 +0100
+++ b/AMD-APP-SDK-3.0/include/SDKUtil/CLUtil.hpp	2015-12-02 19:22:34.209715291 +0100
@@ -749,7 +749,7 @@
 				case CL_DEVICE_TYPE_GPU :
 				{
 					//first find platform having GPU
-					platformFound = getDefaultPlatform(numPlatforms, platforms, platform, dType);
+					platformFound = getDefaultPlatform(numPlatforms, platforms, platform, CL_DEVICE_TYPE_GPU);
 					if(platformFound)
 					{
 						break;
@@ -763,7 +763,7 @@
 					//then find platform having CPU
 					if(!platformFound)
 					{
-						platformFound = getDefaultPlatform(numPlatforms, platforms, platform, dType);
+						platformFound = getDefaultPlatform(numPlatforms, platforms, platform, CL_DEVICE_TYPE_CPU);
 					}
 				} /*end of CPU case*/
 
